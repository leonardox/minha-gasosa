package com.minhagasosa.bd;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.minhagasosa.bd.Rota;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROTA.
*/
public class RotaDao extends AbstractDao<Rota, Long> {

    public static final String TABLENAME = "ROTA";

    /**
     * Properties of entity Rota.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "Nome", false, "NOME");
        public final static Property IdaEVolta = new Property(2, Boolean.class, "idaEVolta", false, "IDA_EVOLTA");
        public final static Property DistanciaIda = new Property(3, Float.class, "distanciaIda", false, "DISTANCIA_IDA");
        public final static Property DistanciaVolta = new Property(4, Float.class, "distanciaVolta", false, "DISTANCIA_VOLTA");
        public final static Property RepeteSemana = new Property(5, Boolean.class, "repeteSemana", false, "REPETE_SEMANA");
        public final static Property Repetoicoes = new Property(6, Integer.class, "repetoicoes", false, "REPETOICOES");
    };


    public RotaDao(DaoConfig config) {
        super(config);
    }
    
    public RotaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROTA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NOME' TEXT," + // 1: Nome
                "'IDA_EVOLTA' INTEGER," + // 2: idaEVolta
                "'DISTANCIA_IDA' REAL," + // 3: distanciaIda
                "'DISTANCIA_VOLTA' REAL," + // 4: distanciaVolta
                "'REPETE_SEMANA' INTEGER," + // 5: repeteSemana
                "'REPETOICOES' INTEGER);"); // 6: repetoicoes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROTA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rota entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nome = entity.getNome();
        if (Nome != null) {
            stmt.bindString(2, Nome);
        }
 
        Boolean idaEVolta = entity.getIdaEVolta();
        if (idaEVolta != null) {
            stmt.bindLong(3, idaEVolta ? 1l: 0l);
        }
 
        Float distanciaIda = entity.getDistanciaIda();
        if (distanciaIda != null) {
            stmt.bindDouble(4, distanciaIda);
        }
 
        Float distanciaVolta = entity.getDistanciaVolta();
        if (distanciaVolta != null) {
            stmt.bindDouble(5, distanciaVolta);
        }
 
        Boolean repeteSemana = entity.getRepeteSemana();
        if (repeteSemana != null) {
            stmt.bindLong(6, repeteSemana ? 1l: 0l);
        }
 
        Integer repetoicoes = entity.getRepetoicoes();
        if (repetoicoes != null) {
            stmt.bindLong(7, repetoicoes);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rota readEntity(Cursor cursor, int offset) {
        Rota entity = new Rota( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nome
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // idaEVolta
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // distanciaIda
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // distanciaVolta
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // repeteSemana
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // repetoicoes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rota entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdaEVolta(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setDistanciaIda(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDistanciaVolta(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setRepeteSemana(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRepetoicoes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rota entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rota entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
